// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/pwmorreale/rapid/internal/config"
)

type FakeConfiguration struct {
	ParseFileStub        func(string) (*config.Scenario, error)
	parseFileMutex       sync.RWMutex
	parseFileArgsForCall []struct {
		arg1 string
	}
	parseFileReturns struct {
		result1 *config.Scenario
		result2 error
	}
	parseFileReturnsOnCall map[int]struct {
		result1 *config.Scenario
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConfiguration) ParseFile(arg1 string) (*config.Scenario, error) {
	fake.parseFileMutex.Lock()
	ret, specificReturn := fake.parseFileReturnsOnCall[len(fake.parseFileArgsForCall)]
	fake.parseFileArgsForCall = append(fake.parseFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ParseFileStub
	fakeReturns := fake.parseFileReturns
	fake.recordInvocation("ParseFile", []interface{}{arg1})
	fake.parseFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConfiguration) ParseFileCallCount() int {
	fake.parseFileMutex.RLock()
	defer fake.parseFileMutex.RUnlock()
	return len(fake.parseFileArgsForCall)
}

func (fake *FakeConfiguration) ParseFileCalls(stub func(string) (*config.Scenario, error)) {
	fake.parseFileMutex.Lock()
	defer fake.parseFileMutex.Unlock()
	fake.ParseFileStub = stub
}

func (fake *FakeConfiguration) ParseFileArgsForCall(i int) string {
	fake.parseFileMutex.RLock()
	defer fake.parseFileMutex.RUnlock()
	argsForCall := fake.parseFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConfiguration) ParseFileReturns(result1 *config.Scenario, result2 error) {
	fake.parseFileMutex.Lock()
	defer fake.parseFileMutex.Unlock()
	fake.ParseFileStub = nil
	fake.parseFileReturns = struct {
		result1 *config.Scenario
		result2 error
	}{result1, result2}
}

func (fake *FakeConfiguration) ParseFileReturnsOnCall(i int, result1 *config.Scenario, result2 error) {
	fake.parseFileMutex.Lock()
	defer fake.parseFileMutex.Unlock()
	fake.ParseFileStub = nil
	if fake.parseFileReturnsOnCall == nil {
		fake.parseFileReturnsOnCall = make(map[int]struct {
			result1 *config.Scenario
			result2 error
		})
	}
	fake.parseFileReturnsOnCall[i] = struct {
		result1 *config.Scenario
		result2 error
	}{result1, result2}
}

func (fake *FakeConfiguration) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parseFileMutex.RLock()
	defer fake.parseFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConfiguration) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.Configuration = new(FakeConfiguration)
