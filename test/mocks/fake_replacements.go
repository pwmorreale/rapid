// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/pwmorreale/rapid/internal/replacements"
)

type FakeReplacements struct {
	AddReplacementStub        func(string, string) error
	addReplacementMutex       sync.RWMutex
	addReplacementArgsForCall []struct {
		arg1 string
		arg2 string
	}
	addReplacementReturns struct {
		result1 error
	}
	addReplacementReturnsOnCall map[int]struct {
		result1 error
	}
	LenStub        func() int
	lenMutex       sync.RWMutex
	lenArgsForCall []struct {
	}
	lenReturns struct {
		result1 int
	}
	lenReturnsOnCall map[int]struct {
		result1 int
	}
	LookupStub        func(string) string
	lookupMutex       sync.RWMutex
	lookupArgsForCall []struct {
		arg1 string
	}
	lookupReturns struct {
		result1 string
	}
	lookupReturnsOnCall map[int]struct {
		result1 string
	}
	ReplaceStub        func(string) string
	replaceMutex       sync.RWMutex
	replaceArgsForCall []struct {
		arg1 string
	}
	replaceReturns struct {
		result1 string
	}
	replaceReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReplacements) AddReplacement(arg1 string, arg2 string) error {
	fake.addReplacementMutex.Lock()
	ret, specificReturn := fake.addReplacementReturnsOnCall[len(fake.addReplacementArgsForCall)]
	fake.addReplacementArgsForCall = append(fake.addReplacementArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.AddReplacementStub
	fakeReturns := fake.addReplacementReturns
	fake.recordInvocation("AddReplacement", []interface{}{arg1, arg2})
	fake.addReplacementMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeReplacements) AddReplacementCallCount() int {
	fake.addReplacementMutex.RLock()
	defer fake.addReplacementMutex.RUnlock()
	return len(fake.addReplacementArgsForCall)
}

func (fake *FakeReplacements) AddReplacementCalls(stub func(string, string) error) {
	fake.addReplacementMutex.Lock()
	defer fake.addReplacementMutex.Unlock()
	fake.AddReplacementStub = stub
}

func (fake *FakeReplacements) AddReplacementArgsForCall(i int) (string, string) {
	fake.addReplacementMutex.RLock()
	defer fake.addReplacementMutex.RUnlock()
	argsForCall := fake.addReplacementArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeReplacements) AddReplacementReturns(result1 error) {
	fake.addReplacementMutex.Lock()
	defer fake.addReplacementMutex.Unlock()
	fake.AddReplacementStub = nil
	fake.addReplacementReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReplacements) AddReplacementReturnsOnCall(i int, result1 error) {
	fake.addReplacementMutex.Lock()
	defer fake.addReplacementMutex.Unlock()
	fake.AddReplacementStub = nil
	if fake.addReplacementReturnsOnCall == nil {
		fake.addReplacementReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReplacementReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeReplacements) Len() int {
	fake.lenMutex.Lock()
	ret, specificReturn := fake.lenReturnsOnCall[len(fake.lenArgsForCall)]
	fake.lenArgsForCall = append(fake.lenArgsForCall, struct {
	}{})
	stub := fake.LenStub
	fakeReturns := fake.lenReturns
	fake.recordInvocation("Len", []interface{}{})
	fake.lenMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeReplacements) LenCallCount() int {
	fake.lenMutex.RLock()
	defer fake.lenMutex.RUnlock()
	return len(fake.lenArgsForCall)
}

func (fake *FakeReplacements) LenCalls(stub func() int) {
	fake.lenMutex.Lock()
	defer fake.lenMutex.Unlock()
	fake.LenStub = stub
}

func (fake *FakeReplacements) LenReturns(result1 int) {
	fake.lenMutex.Lock()
	defer fake.lenMutex.Unlock()
	fake.LenStub = nil
	fake.lenReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeReplacements) LenReturnsOnCall(i int, result1 int) {
	fake.lenMutex.Lock()
	defer fake.lenMutex.Unlock()
	fake.LenStub = nil
	if fake.lenReturnsOnCall == nil {
		fake.lenReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.lenReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeReplacements) Lookup(arg1 string) string {
	fake.lookupMutex.Lock()
	ret, specificReturn := fake.lookupReturnsOnCall[len(fake.lookupArgsForCall)]
	fake.lookupArgsForCall = append(fake.lookupArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.LookupStub
	fakeReturns := fake.lookupReturns
	fake.recordInvocation("Lookup", []interface{}{arg1})
	fake.lookupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeReplacements) LookupCallCount() int {
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	return len(fake.lookupArgsForCall)
}

func (fake *FakeReplacements) LookupCalls(stub func(string) string) {
	fake.lookupMutex.Lock()
	defer fake.lookupMutex.Unlock()
	fake.LookupStub = stub
}

func (fake *FakeReplacements) LookupArgsForCall(i int) string {
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	argsForCall := fake.lookupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReplacements) LookupReturns(result1 string) {
	fake.lookupMutex.Lock()
	defer fake.lookupMutex.Unlock()
	fake.LookupStub = nil
	fake.lookupReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeReplacements) LookupReturnsOnCall(i int, result1 string) {
	fake.lookupMutex.Lock()
	defer fake.lookupMutex.Unlock()
	fake.LookupStub = nil
	if fake.lookupReturnsOnCall == nil {
		fake.lookupReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.lookupReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeReplacements) Replace(arg1 string) string {
	fake.replaceMutex.Lock()
	ret, specificReturn := fake.replaceReturnsOnCall[len(fake.replaceArgsForCall)]
	fake.replaceArgsForCall = append(fake.replaceArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ReplaceStub
	fakeReturns := fake.replaceReturns
	fake.recordInvocation("Replace", []interface{}{arg1})
	fake.replaceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeReplacements) ReplaceCallCount() int {
	fake.replaceMutex.RLock()
	defer fake.replaceMutex.RUnlock()
	return len(fake.replaceArgsForCall)
}

func (fake *FakeReplacements) ReplaceCalls(stub func(string) string) {
	fake.replaceMutex.Lock()
	defer fake.replaceMutex.Unlock()
	fake.ReplaceStub = stub
}

func (fake *FakeReplacements) ReplaceArgsForCall(i int) string {
	fake.replaceMutex.RLock()
	defer fake.replaceMutex.RUnlock()
	argsForCall := fake.replaceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReplacements) ReplaceReturns(result1 string) {
	fake.replaceMutex.Lock()
	defer fake.replaceMutex.Unlock()
	fake.ReplaceStub = nil
	fake.replaceReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeReplacements) ReplaceReturnsOnCall(i int, result1 string) {
	fake.replaceMutex.Lock()
	defer fake.replaceMutex.Unlock()
	fake.ReplaceStub = nil
	if fake.replaceReturnsOnCall == nil {
		fake.replaceReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.replaceReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeReplacements) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addReplacementMutex.RLock()
	defer fake.addReplacementMutex.RUnlock()
	fake.lenMutex.RLock()
	defer fake.lenMutex.RUnlock()
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	fake.replaceMutex.RLock()
	defer fake.replaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReplacements) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ replacements.Replacements = new(FakeReplacements)
